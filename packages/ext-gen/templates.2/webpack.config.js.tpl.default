const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin')
const ExtWebpackPlugin = require('@sencha/ext-webpack-plugin')
const portfinder = require('portfinder')

module.exports = function (env) {
  function get(it, val) {if(env == undefined) {return val} else if(env[it] == undefined) {return val} else {return env[it]}}

  var profile     = get('profile',     '')
  var environment = get('environment', 'development')
  var treeshake   = get('treeshake',   'no')
  var browser     = get('browser',     'yes')
  var watch       = get('watch',       'yes')
  var verbose     = get('verbose',     'no')
  var cmdopts     = get('cmdopts',     [])
  var isProd      = false
  if (environment === 'production' ||
        (cmdopts.includes('--production') ||
         cmdopts.includes('--environment=production') ||
         cmdopts.includes('-e=production') ||
         cmdopts.includes('-pr'))
      ) 
  {
    browser = 'no'
    watch = 'no'
    isProd = true
  }
  
  const outputFolder = './'
  portfinder.basePort = (env && env.port) || 1962
  return portfinder.getPortPromise().then(port => {
    const plugins = [
      new HtmlWebpackPlugin({template: "index.html",hash: true,inject: "body"}),
      new ExtWebpackPlugin({
        framework: 'extjs',
        toolkit: 'modern',
        theme: 'theme-kitchensink',
        emit: 'yes',
        script: '',
        port: port,
        packages: [],
        profile: profile, 
        environment: environment,
        treeshake: treeshake,
        browser: browser,
        watch: watch,
        verbose: verbose,
        cmdopts: cmdopts
      })
    ]
    return {
      mode: environment,
      devtool: (environment === 'development') ? 'inline-source-map' : false,
      context: path.join(__dirname, contextFolder),
      entry: entryFile,
      output: {
        path: path.join(__dirname, outputFolder),
        filename: bundleFormat
      },
      plugins: plugins,
      module: {
        rules: rules
      },
      resolve: resolve,
      performance: { hints: false },
      stats: 'none',
      optimization: { noEmitOnErrors: true},
      node: false,
      devServer: {
        liveReload: !isProd,
        historyApiFallback: !isProd,
        host: host,
        port: port,
        allowedHosts: 'all',
        compress: isProd,
        static: {
          directory: path.resolve(__dirname, outputFolder),
          watch: isProd ? false : { ignored: ignoreFolders }
        },        
        devMiddleware: {
          stats: stats
        },
        // inline: !isProd, // this was removed without replacement - https://github.com/webpack/webpack-dev-server/blob/master/migration-v4.md
      }
    }
  })
}
